// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fsm_cckconfig_service.proto

#include "fsm_cckconfig_service.pb.h"
#include "fsm_cckconfig_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fsm {

static const char* CCKConfig_method_names[] = {
  "/fsm.CCKConfig/GetCfgMN401",
  "/fsm.CCKConfig/GetCfgMN",
  "/fsm.CCKConfig/GetCfgPO",
  "/fsm.CCKConfig/GetCfgVirtPO",
  "/fsm.CCKConfig/SetCfgMN401",
  "/fsm.CCKConfig/SetCfgMN",
  "/fsm.CCKConfig/SetCfgPO",
  "/fsm.CCKConfig/SetCfgVirtPO",
};

std::unique_ptr< CCKConfig::Stub> CCKConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CCKConfig::Stub> stub(new CCKConfig::Stub(channel));
  return stub;
}

CCKConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCfgMN401_(CCKConfig_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCfgMN_(CCKConfig_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCfgPO_(CCKConfig_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCfgVirtPO_(CCKConfig_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCfgMN401_(CCKConfig_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCfgMN_(CCKConfig_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCfgPO_(CCKConfig_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCfgVirtPO_(CCKConfig_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CCKConfig::Stub::GetCfgMN401(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::fsm::MN401* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCfgMN401_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::MN401>* CCKConfig::Stub::AsyncGetCfgMN401Raw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::MN401>::Create(channel_.get(), cq, rpcmethod_GetCfgMN401_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::MN401>* CCKConfig::Stub::PrepareAsyncGetCfgMN401Raw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::MN401>::Create(channel_.get(), cq, rpcmethod_GetCfgMN401_, context, request, false);
}

::grpc::Status CCKConfig::Stub::GetCfgMN(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::fsm::MN* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCfgMN_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::MN>* CCKConfig::Stub::AsyncGetCfgMNRaw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::MN>::Create(channel_.get(), cq, rpcmethod_GetCfgMN_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::MN>* CCKConfig::Stub::PrepareAsyncGetCfgMNRaw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::MN>::Create(channel_.get(), cq, rpcmethod_GetCfgMN_, context, request, false);
}

::grpc::Status CCKConfig::Stub::GetCfgPO(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::fsm::P0* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCfgPO_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::P0>* CCKConfig::Stub::AsyncGetCfgPORaw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::P0>::Create(channel_.get(), cq, rpcmethod_GetCfgPO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::P0>* CCKConfig::Stub::PrepareAsyncGetCfgPORaw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::P0>::Create(channel_.get(), cq, rpcmethod_GetCfgPO_, context, request, false);
}

::grpc::Status CCKConfig::Stub::GetCfgVirtPO(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::fsm::VirtP0* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCfgVirtPO_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::VirtP0>* CCKConfig::Stub::AsyncGetCfgVirtPORaw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::VirtP0>::Create(channel_.get(), cq, rpcmethod_GetCfgVirtPO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::VirtP0>* CCKConfig::Stub::PrepareAsyncGetCfgVirtPORaw(::grpc::ClientContext* context, const ::fsm::GetDeviceRq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::VirtP0>::Create(channel_.get(), cq, rpcmethod_GetCfgVirtPO_, context, request, false);
}

::grpc::Status CCKConfig::Stub::SetCfgMN401(::grpc::ClientContext* context, const ::fsm::MN401& request, ::fsm::SetDeviceResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCfgMN401_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::AsyncSetCfgMN401Raw(::grpc::ClientContext* context, const ::fsm::MN401& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgMN401_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::PrepareAsyncSetCfgMN401Raw(::grpc::ClientContext* context, const ::fsm::MN401& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgMN401_, context, request, false);
}

::grpc::Status CCKConfig::Stub::SetCfgMN(::grpc::ClientContext* context, const ::fsm::MN& request, ::fsm::SetDeviceResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCfgMN_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::AsyncSetCfgMNRaw(::grpc::ClientContext* context, const ::fsm::MN& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgMN_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::PrepareAsyncSetCfgMNRaw(::grpc::ClientContext* context, const ::fsm::MN& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgMN_, context, request, false);
}

::grpc::Status CCKConfig::Stub::SetCfgPO(::grpc::ClientContext* context, const ::fsm::P0& request, ::fsm::SetDeviceResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCfgPO_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::AsyncSetCfgPORaw(::grpc::ClientContext* context, const ::fsm::P0& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgPO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::PrepareAsyncSetCfgPORaw(::grpc::ClientContext* context, const ::fsm::P0& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgPO_, context, request, false);
}

::grpc::Status CCKConfig::Stub::SetCfgVirtPO(::grpc::ClientContext* context, const ::fsm::VirtP0& request, ::fsm::SetDeviceResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCfgVirtPO_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::AsyncSetCfgVirtPORaw(::grpc::ClientContext* context, const ::fsm::VirtP0& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgVirtPO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fsm::SetDeviceResp>* CCKConfig::Stub::PrepareAsyncSetCfgVirtPORaw(::grpc::ClientContext* context, const ::fsm::VirtP0& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fsm::SetDeviceResp>::Create(channel_.get(), cq, rpcmethod_SetCfgVirtPO_, context, request, false);
}

CCKConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::GetDeviceRq, ::fsm::MN401>(
          std::mem_fn(&CCKConfig::Service::GetCfgMN401), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::GetDeviceRq, ::fsm::MN>(
          std::mem_fn(&CCKConfig::Service::GetCfgMN), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::GetDeviceRq, ::fsm::P0>(
          std::mem_fn(&CCKConfig::Service::GetCfgPO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::GetDeviceRq, ::fsm::VirtP0>(
          std::mem_fn(&CCKConfig::Service::GetCfgVirtPO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::MN401, ::fsm::SetDeviceResp>(
          std::mem_fn(&CCKConfig::Service::SetCfgMN401), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::MN, ::fsm::SetDeviceResp>(
          std::mem_fn(&CCKConfig::Service::SetCfgMN), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::P0, ::fsm::SetDeviceResp>(
          std::mem_fn(&CCKConfig::Service::SetCfgPO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCKConfig_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCKConfig::Service, ::fsm::VirtP0, ::fsm::SetDeviceResp>(
          std::mem_fn(&CCKConfig::Service::SetCfgVirtPO), this)));
}

CCKConfig::Service::~Service() {
}

::grpc::Status CCKConfig::Service::GetCfgMN401(::grpc::ServerContext* context, const ::fsm::GetDeviceRq* request, ::fsm::MN401* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::GetCfgMN(::grpc::ServerContext* context, const ::fsm::GetDeviceRq* request, ::fsm::MN* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::GetCfgPO(::grpc::ServerContext* context, const ::fsm::GetDeviceRq* request, ::fsm::P0* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::GetCfgVirtPO(::grpc::ServerContext* context, const ::fsm::GetDeviceRq* request, ::fsm::VirtP0* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::SetCfgMN401(::grpc::ServerContext* context, const ::fsm::MN401* request, ::fsm::SetDeviceResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::SetCfgMN(::grpc::ServerContext* context, const ::fsm::MN* request, ::fsm::SetDeviceResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::SetCfgPO(::grpc::ServerContext* context, const ::fsm::P0* request, ::fsm::SetDeviceResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCKConfig::Service::SetCfgVirtPO(::grpc::ServerContext* context, const ::fsm::VirtP0* request, ::fsm::SetDeviceResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fsm

