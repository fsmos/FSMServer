// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsm_cckconfig_MN401.proto

#ifndef PROTOBUF_INCLUDED_fsm_5fcckconfig_5fMN401_2eproto
#define PROTOBUF_INCLUDED_fsm_5fcckconfig_5fMN401_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_fsm_5fcckconfig_5fMN401_2eproto 

namespace protobuf_fsm_5fcckconfig_5fMN401_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_fsm_5fcckconfig_5fMN401_2eproto
namespace fsm {
class MN401;
class MN401DefaultTypeInternal;
extern MN401DefaultTypeInternal _MN401_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace fsm
namespace google {
namespace protobuf {
template<> ::fsm::MN401* Arena::CreateMaybeMessage<::fsm::MN401>(Arena*);
template<> ::fsm::ServerInfo* Arena::CreateMaybeMessage<::fsm::ServerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fsm {

enum CCKTypeDevice {
  DT_None = 0,
  DT_MN921 = 1,
  DT_MN825 = 2,
  DT_PO07 = 3,
  DT_PO08 = 4,
  DT_PO06 = 5,
  DT_MN524 = 6,
  DT_MN111 = 7,
  DT_VirtPO = 8,
  DT_MN401 = 9,
  CCKTypeDevice_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CCKTypeDevice_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CCKTypeDevice_IsValid(int value);
const CCKTypeDevice CCKTypeDevice_MIN = DT_None;
const CCKTypeDevice CCKTypeDevice_MAX = DT_MN401;
const int CCKTypeDevice_ARRAYSIZE = CCKTypeDevice_MAX + 1;

const ::google::protobuf::EnumDescriptor* CCKTypeDevice_descriptor();
inline const ::std::string& CCKTypeDevice_Name(CCKTypeDevice value) {
  return ::google::protobuf::internal::NameOfEnum(
    CCKTypeDevice_descriptor(), value);
}
inline bool CCKTypeDevice_Parse(
    const ::std::string& name, CCKTypeDevice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CCKTypeDevice>(
    CCKTypeDevice_descriptor(), name, value);
}
// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsm.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(NULL);
  }

  ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::int32 ip() const;
  void set_ip(::google::protobuf::int32 value);

  // int32 sip_port = 2;
  void clear_sip_port();
  static const int kSipPortFieldNumber = 2;
  ::google::protobuf::int32 sip_port() const;
  void set_sip_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fsm.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ip_;
  ::google::protobuf::int32 sip_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fsm_5fcckconfig_5fMN401_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MN401 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsm.MN401) */ {
 public:
  MN401();
  virtual ~MN401();

  MN401(const MN401& from);

  inline MN401& operator=(const MN401& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MN401(MN401&& from) noexcept
    : MN401() {
    *this = ::std::move(from);
  }

  inline MN401& operator=(MN401&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MN401& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MN401* internal_default_instance() {
    return reinterpret_cast<const MN401*>(
               &_MN401_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MN401* other);
  friend void swap(MN401& a, MN401& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MN401* New() const final {
    return CreateMaybeMessage<MN401>(NULL);
  }

  MN401* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MN401>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MN401& from);
  void MergeFrom(const MN401& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MN401* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fsm.CCKTypeDevice devlist = 2;
  int devlist_size() const;
  void clear_devlist();
  static const int kDevlistFieldNumber = 2;
  ::fsm::CCKTypeDevice devlist(int index) const;
  void set_devlist(int index, ::fsm::CCKTypeDevice value);
  void add_devlist(::fsm::CCKTypeDevice value);
  const ::google::protobuf::RepeatedField<int>& devlist() const;
  ::google::protobuf::RepeatedField<int>* mutable_devlist();

  // .fsm.ServerInfo client = 1;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 1;
  private:
  const ::fsm::ServerInfo& _internal_client() const;
  public:
  const ::fsm::ServerInfo& client() const;
  ::fsm::ServerInfo* release_client();
  ::fsm::ServerInfo* mutable_client();
  void set_allocated_client(::fsm::ServerInfo* client);

  // @@protoc_insertion_point(class_scope:fsm.MN401)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> devlist_;
  mutable int _devlist_cached_byte_size_;
  ::fsm::ServerInfo* client_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fsm_5fcckconfig_5fMN401_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// int32 ip = 1;
inline void ServerInfo::clear_ip() {
  ip_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:fsm.ServerInfo.ip)
  return ip_;
}
inline void ServerInfo::set_ip(::google::protobuf::int32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:fsm.ServerInfo.ip)
}

// int32 sip_port = 2;
inline void ServerInfo::clear_sip_port() {
  sip_port_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::sip_port() const {
  // @@protoc_insertion_point(field_get:fsm.ServerInfo.sip_port)
  return sip_port_;
}
inline void ServerInfo::set_sip_port(::google::protobuf::int32 value) {
  
  sip_port_ = value;
  // @@protoc_insertion_point(field_set:fsm.ServerInfo.sip_port)
}

// -------------------------------------------------------------------

// MN401

// .fsm.ServerInfo client = 1;
inline bool MN401::has_client() const {
  return this != internal_default_instance() && client_ != NULL;
}
inline void MN401::clear_client() {
  if (GetArenaNoVirtual() == NULL && client_ != NULL) {
    delete client_;
  }
  client_ = NULL;
}
inline const ::fsm::ServerInfo& MN401::_internal_client() const {
  return *client_;
}
inline const ::fsm::ServerInfo& MN401::client() const {
  const ::fsm::ServerInfo* p = client_;
  // @@protoc_insertion_point(field_get:fsm.MN401.client)
  return p != NULL ? *p : *reinterpret_cast<const ::fsm::ServerInfo*>(
      &::fsm::_ServerInfo_default_instance_);
}
inline ::fsm::ServerInfo* MN401::release_client() {
  // @@protoc_insertion_point(field_release:fsm.MN401.client)
  
  ::fsm::ServerInfo* temp = client_;
  client_ = NULL;
  return temp;
}
inline ::fsm::ServerInfo* MN401::mutable_client() {
  
  if (client_ == NULL) {
    auto* p = CreateMaybeMessage<::fsm::ServerInfo>(GetArenaNoVirtual());
    client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fsm.MN401.client)
  return client_;
}
inline void MN401::set_allocated_client(::fsm::ServerInfo* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_;
  }
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:fsm.MN401.client)
}

// repeated .fsm.CCKTypeDevice devlist = 2;
inline int MN401::devlist_size() const {
  return devlist_.size();
}
inline void MN401::clear_devlist() {
  devlist_.Clear();
}
inline ::fsm::CCKTypeDevice MN401::devlist(int index) const {
  // @@protoc_insertion_point(field_get:fsm.MN401.devlist)
  return static_cast< ::fsm::CCKTypeDevice >(devlist_.Get(index));
}
inline void MN401::set_devlist(int index, ::fsm::CCKTypeDevice value) {
  devlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:fsm.MN401.devlist)
}
inline void MN401::add_devlist(::fsm::CCKTypeDevice value) {
  devlist_.Add(value);
  // @@protoc_insertion_point(field_add:fsm.MN401.devlist)
}
inline const ::google::protobuf::RepeatedField<int>&
MN401::devlist() const {
  // @@protoc_insertion_point(field_list:fsm.MN401.devlist)
  return devlist_;
}
inline ::google::protobuf::RepeatedField<int>*
MN401::mutable_devlist() {
  // @@protoc_insertion_point(field_mutable_list:fsm.MN401.devlist)
  return &devlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fsm

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fsm::CCKTypeDevice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fsm::CCKTypeDevice>() {
  return ::fsm::CCKTypeDevice_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_fsm_5fcckconfig_5fMN401_2eproto
