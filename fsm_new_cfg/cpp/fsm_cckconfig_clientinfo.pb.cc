// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsm_cckconfig_clientinfo.proto

#include "fsm_cckconfig_clientinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace fsm {
class ClientInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientInfo>
      _instance;
} _ClientInfo_default_instance_;
}  // namespace fsm
namespace protobuf_fsm_5fcckconfig_5fclientinfo_2eproto {
static void InitDefaultsClientInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fsm::_ClientInfo_default_instance_;
    new (ptr) ::fsm::ClientInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fsm::ClientInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ClientInfo.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fsm::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fsm::ClientInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fsm::ClientInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fsm::ClientInfo, subnetmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fsm::ClientInfo, gateway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fsm::ClientInfo, iid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fsm::ClientInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fsm::_ClientInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fsm_cckconfig_clientinfo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036fsm_cckconfig_clientinfo.proto\022\003fsm\"V\n"
      "\nClientInfo\022\n\n\002id\030\001 \001(\005\022\n\n\002ip\030\002 \001(\005\022\022\n\ns"
      "ubnetmask\030\003 \001(\005\022\017\n\007gateway\030\004 \001(\005\022\013\n\003iid\030"
      "\005 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsm_cckconfig_clientinfo.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fsm_5fcckconfig_5fclientinfo_2eproto
namespace fsm {

// ===================================================================

void ClientInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientInfo::kIdFieldNumber;
const int ClientInfo::kIpFieldNumber;
const int ClientInfo::kSubnetmaskFieldNumber;
const int ClientInfo::kGatewayFieldNumber;
const int ClientInfo::kIidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientInfo::ClientInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fsm_5fcckconfig_5fclientinfo_2eproto::scc_info_ClientInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fsm.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&iid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(iid_));
  // @@protoc_insertion_point(copy_constructor:fsm.ClientInfo)
}

void ClientInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(iid_));
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:fsm.ClientInfo)
  SharedDtor();
}

void ClientInfo::SharedDtor() {
}

void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientInfo::descriptor() {
  ::protobuf_fsm_5fcckconfig_5fclientinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fsm_5fcckconfig_5fclientinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientInfo& ClientInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fsm_5fcckconfig_5fclientinfo_2eproto::scc_info_ClientInfo.base);
  return *internal_default_instance();
}


void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fsm.ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(iid_));
  _internal_metadata_.Clear();
}

bool ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fsm.ClientInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subnetmask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subnetmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gateway = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fsm.ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fsm.ClientInfo)
  return false;
#undef DO_
}

void ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fsm.ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 ip = 2;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ip(), output);
  }

  // int32 subnetmask = 3;
  if (this->subnetmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subnetmask(), output);
  }

  // int32 gateway = 4;
  if (this->gateway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gateway(), output);
  }

  // int32 iid = 5;
  if (this->iid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fsm.ClientInfo)
}

::google::protobuf::uint8* ClientInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fsm.ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 ip = 2;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ip(), target);
  }

  // int32 subnetmask = 3;
  if (this->subnetmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subnetmask(), target);
  }

  // int32 gateway = 4;
  if (this->gateway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gateway(), target);
  }

  // int32 iid = 5;
  if (this->iid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fsm.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fsm.ClientInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 ip = 2;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip());
  }

  // int32 subnetmask = 3;
  if (this->subnetmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subnetmask());
  }

  // int32 gateway = 4;
  if (this->gateway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gateway());
  }

  // int32 iid = 5;
  if (this->iid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fsm.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fsm.ClientInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fsm.ClientInfo)
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fsm.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.subnetmask() != 0) {
    set_subnetmask(from.subnetmask());
  }
  if (from.gateway() != 0) {
    set_gateway(from.gateway());
  }
  if (from.iid() != 0) {
    set_iid(from.iid());
  }
}

void ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fsm.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fsm.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::Swap(ClientInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(ip_, other->ip_);
  swap(subnetmask_, other->subnetmask_);
  swap(gateway_, other->gateway_);
  swap(iid_, other->iid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientInfo::GetMetadata() const {
  protobuf_fsm_5fcckconfig_5fclientinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fsm_5fcckconfig_5fclientinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fsm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fsm::ClientInfo* Arena::CreateMaybeMessage< ::fsm::ClientInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fsm::ClientInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
