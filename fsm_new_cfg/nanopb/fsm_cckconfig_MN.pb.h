/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Mon Aug 20 13:35:55 2018. */

#ifndef PB_FSM_FSM_CCKCONFIG_MN_PB_H_INCLUDED
#define PB_FSM_FSM_CCKCONFIG_MN_PB_H_INCLUDED
#include <pb.h>

#include "fsm_cckconfig_clientinfo.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _fsm_MNTypeDevice {
    fsm_MNTypeDevice_MB = 0,
    fsm_MNTypeDevice_CB = 1,
    fsm_MNTypeDevice_TCH = 2,
    fsm_MNTypeDevice_ATS = 3,
    fsm_MNTypeDevice_R168 = 4,
    fsm_MNTypeDevice_R168100KB = 5
} fsm_MNTypeDevice;
#define _fsm_MNTypeDevice_MIN fsm_MNTypeDevice_MB
#define _fsm_MNTypeDevice_MAX fsm_MNTypeDevice_R168100KB
#define _fsm_MNTypeDevice_ARRAYSIZE ((fsm_MNTypeDevice)(fsm_MNTypeDevice_R168100KB+1))

typedef enum _fsm_MN921TypeTCH {
    fsm_MN921TypeTCH_TwoWire = 0,
    fsm_MN921TypeTCH_FourWire_FL = 1,
    fsm_MN921TypeTCH_FourWire_TCH = 2
} fsm_MN921TypeTCH;
#define _fsm_MN921TypeTCH_MIN fsm_MN921TypeTCH_TwoWire
#define _fsm_MN921TypeTCH_MAX fsm_MN921TypeTCH_FourWire_TCH
#define _fsm_MN921TypeTCH_ARRAYSIZE ((fsm_MN921TypeTCH)(fsm_MN921TypeTCH_FourWire_TCH+1))

typedef enum _fsm_MN921OutputCallFrequency {
    fsm_MN921OutputCallFrequency_F_600 = 0,
    fsm_MN921OutputCallFrequency_F_2100 = 1
} fsm_MN921OutputCallFrequency;
#define _fsm_MN921OutputCallFrequency_MIN fsm_MN921OutputCallFrequency_F_600
#define _fsm_MN921OutputCallFrequency_MAX fsm_MN921OutputCallFrequency_F_2100
#define _fsm_MN921OutputCallFrequency_ARRAYSIZE ((fsm_MN921OutputCallFrequency)(fsm_MN921OutputCallFrequency_F_2100+1))

typedef enum _fsm_MN921TypeATS {
    fsm_MN921TypeATS_Pulse = 0,
    fsm_MN921TypeATS_Tone = 1
} fsm_MN921TypeATS;
#define _fsm_MN921TypeATS_MIN fsm_MN921TypeATS_Pulse
#define _fsm_MN921TypeATS_MAX fsm_MN921TypeATS_Tone
#define _fsm_MN921TypeATS_ARRAYSIZE ((fsm_MN921TypeATS)(fsm_MN921TypeATS_Tone+1))

/* Struct definitions */
typedef struct _fsm_MN825_R168 {
    uint32_t r168port;
    uint32_t apd;
/* @@protoc_insertion_point(struct:fsm_MN825_R168) */
} fsm_MN825_R168;

typedef struct _fsm_MN825_R168C {
    uint32_t TimeOutputCall;
/* @@protoc_insertion_point(struct:fsm_MN825_R168C) */
} fsm_MN825_R168C;

typedef struct _fsm_MN921_ATS {
    fsm_MN921TypeATS typeats;
/* @@protoc_insertion_point(struct:fsm_MN921_ATS) */
} fsm_MN921_ATS;

typedef struct _fsm_MN921_CB {
    uint32_t TimeOutputCall;
/* @@protoc_insertion_point(struct:fsm_MN921_CB) */
} fsm_MN921_CB;

typedef struct _fsm_MN921_MB {
    uint32_t TimeOutputCall;
/* @@protoc_insertion_point(struct:fsm_MN921_MB) */
} fsm_MN921_MB;

typedef struct _fsm_MN921_TCH {
    fsm_MN921TypeTCH typetch;
    uint32_t TimeOutputCall;
    uint32_t MinTimeOutputCall;
    uint32_t MaxTimeOutputCall;
    fsm_MN921OutputCallFrequency ocfr;
/* @@protoc_insertion_point(struct:fsm_MN921_TCH) */
} fsm_MN921_TCH;

typedef struct _fsm_MN_Channel {
    uint32_t self_sip_port;
    uint32_t self_rtp_port;
    uint32_t self_sip_number;
    uint32_t volume;
    fsm_MNTypeDevice typedev;
    pb_size_t SubscriberForCall_count;
    uint32_t SubscriberForCall[4];
    fsm_MN921_MB mb;
    fsm_MN921_CB cb;
    fsm_MN921_TCH tch;
    fsm_MN921_ATS ats;
    fsm_MN825_R168C r168;
/* @@protoc_insertion_point(struct:fsm_MN_Channel) */
} fsm_MN_Channel;

typedef struct _fsm_MN {
    fsm_ClientInfo client;
    fsm_MN825_R168 r168;
    pb_size_t channel_count;
    fsm_MN_Channel channel[2];
/* @@protoc_insertion_point(struct:fsm_MN) */
} fsm_MN;

/* Default values for struct fields */

/* Initializer values for message structs */
#define fsm_MN921_MB_init_default                {0}
#define fsm_MN921_CB_init_default                {0}
#define fsm_MN921_TCH_init_default               {_fsm_MN921TypeTCH_MIN, 0, 0, 0, _fsm_MN921OutputCallFrequency_MIN}
#define fsm_MN921_ATS_init_default               {_fsm_MN921TypeATS_MIN}
#define fsm_MN825_R168C_init_default             {0}
#define fsm_MN_Channel_init_default              {0, 0, 0, 0, _fsm_MNTypeDevice_MIN, 0, {0, 0, 0, 0}, fsm_MN921_MB_init_default, fsm_MN921_CB_init_default, fsm_MN921_TCH_init_default, fsm_MN921_ATS_init_default, fsm_MN825_R168C_init_default}
#define fsm_MN825_R168_init_default              {0, 0}
#define fsm_MN_init_default                      {fsm_ClientInfo_init_default, fsm_MN825_R168_init_default, 0, {fsm_MN_Channel_init_default, fsm_MN_Channel_init_default}}
#define fsm_MN921_MB_init_zero                   {0}
#define fsm_MN921_CB_init_zero                   {0}
#define fsm_MN921_TCH_init_zero                  {_fsm_MN921TypeTCH_MIN, 0, 0, 0, _fsm_MN921OutputCallFrequency_MIN}
#define fsm_MN921_ATS_init_zero                  {_fsm_MN921TypeATS_MIN}
#define fsm_MN825_R168C_init_zero                {0}
#define fsm_MN_Channel_init_zero                 {0, 0, 0, 0, _fsm_MNTypeDevice_MIN, 0, {0, 0, 0, 0}, fsm_MN921_MB_init_zero, fsm_MN921_CB_init_zero, fsm_MN921_TCH_init_zero, fsm_MN921_ATS_init_zero, fsm_MN825_R168C_init_zero}
#define fsm_MN825_R168_init_zero                 {0, 0}
#define fsm_MN_init_zero                         {fsm_ClientInfo_init_zero, fsm_MN825_R168_init_zero, 0, {fsm_MN_Channel_init_zero, fsm_MN_Channel_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define fsm_MN825_R168_r168port_tag              1
#define fsm_MN825_R168_apd_tag                   2
#define fsm_MN825_R168C_TimeOutputCall_tag       1
#define fsm_MN921_ATS_typeats_tag                1
#define fsm_MN921_CB_TimeOutputCall_tag          1
#define fsm_MN921_MB_TimeOutputCall_tag          1
#define fsm_MN921_TCH_typetch_tag                1
#define fsm_MN921_TCH_TimeOutputCall_tag         2
#define fsm_MN921_TCH_MinTimeOutputCall_tag      3
#define fsm_MN921_TCH_MaxTimeOutputCall_tag      4
#define fsm_MN921_TCH_ocfr_tag                   5
#define fsm_MN_Channel_self_sip_port_tag         1
#define fsm_MN_Channel_self_rtp_port_tag         2
#define fsm_MN_Channel_self_sip_number_tag       3
#define fsm_MN_Channel_volume_tag                4
#define fsm_MN_Channel_typedev_tag               5
#define fsm_MN_Channel_SubscriberForCall_tag     6
#define fsm_MN_Channel_mb_tag                    7
#define fsm_MN_Channel_cb_tag                    8
#define fsm_MN_Channel_tch_tag                   9
#define fsm_MN_Channel_ats_tag                   10
#define fsm_MN_Channel_r168_tag                  11
#define fsm_MN_client_tag                        1
#define fsm_MN_r168_tag                          2
#define fsm_MN_channel_tag                       3

/* Struct field encoding specification for nanopb */
extern const pb_field_t fsm_MN921_MB_fields[2];
extern const pb_field_t fsm_MN921_CB_fields[2];
extern const pb_field_t fsm_MN921_TCH_fields[6];
extern const pb_field_t fsm_MN921_ATS_fields[2];
extern const pb_field_t fsm_MN825_R168C_fields[2];
extern const pb_field_t fsm_MN_Channel_fields[12];
extern const pb_field_t fsm_MN825_R168_fields[3];
extern const pb_field_t fsm_MN_fields[4];

/* Maximum encoded size of messages (where known) */
#define fsm_MN921_MB_size                        6
#define fsm_MN921_CB_size                        6
#define fsm_MN921_TCH_size                       22
#define fsm_MN921_ATS_size                       2
#define fsm_MN825_R168C_size                     6
#define fsm_MN_Channel_size                      102
#define fsm_MN825_R168_size                      12
#define fsm_MN_size                              279

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FSM_CCKCONFIG_MN_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
